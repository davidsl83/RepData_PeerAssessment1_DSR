pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
archivos = paste(directory,"/", list.files(directory), sep = "")
v <- vector()
for (i in archivos){
prueba = read.csv(i)
good <- complete.cases(prueba)
if ((as.data.frame(table(good))$Freq[2]) >= threshold){
print("ES MAYOR");
}
else{
print("ES MENOR");
}
}
archivos = paste(directory,"/", list.files(directory), sep = "")
archivos = paste("specdata","/", list.files(directory), sep = "")
archivos = paste("specdata","/", list.files("specdata"), sep = "")
archivos
for (i in archivos){
prueba = read.csv(i)
good <- complete.cases(prueba)
if ((as.data.frame(table(good))$Freq[2]) >= threshold){
print("ES MAYOR");
}
else{
print("ES MENOR");
}
}
for (i in archivos){
prueba = read.csv(i)
good <- complete.cases(prueba)
if ((as.data.frame(table(good))$Freq[2]) >= 1000){
print("ES MAYOR");
}
else{
print("ES MENOR");
}
}
for (i in archivos){
prueba = read.csv(i)
good <- complete.cases(prueba)
if ((as.data.frame(table(good))$Freq[2]) >= 10){
print("ES MAYOR");
}
else{
print("ES MENOR");
}
}
for (i in archivos){
prueba = read.csv(i)
good <- complete.cases(prueba)
if ((as.data.frame(table(good))$Freq[2]) >= 100){
print("ES MAYOR");
}
else{
print("ES MENOR");
}
}
source("corr.R")
source("corr.R")
source("corr.R")
cr <- corr("specdata", 150)
complete("specdata", 30:25)
complete("specdata", 1:332)
conjunto = complete("specdata", 1:332)
View(conjunto)
conjunto$nobs > 100
conjunto$id[conjunto$nobs > 100]
conjunto$id[conjunto$nobs > 100]
x = conjunto$id[conjunto$nobs > 100]
!is.na(x)
x = factor(conjunto$id[conjunto$nobs > 100])
x
x = factor(conjunto$id[conjunto$nobs > 100], exclude = NULL)
x
x = conjunto$id[conjunto$nobs > 100]
x
x[!is.na(x)]
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
corr("specdata", 1500)
corr("specdata", 1000)
corr("specdata", 800)
source("corr.R")
corr("specdata", 800)
source("corr.R")
corr("specdata", 800)
source("corr.R")
corr("specdata", 800)
saco
archivos
source("corr.R")
corr("specdata", 800)
source("corr.R")
corr("specdata", 800)
View(prueba)
source("corr.R")
corr("specdata", 800)
cor(prueba$sulfate,prueba$nitrate,na.rm = TRUE)
cor(prueba$sulfate,prueba$nitrate)
cor(prueba$sulfate,prueba$nitrate,use = "complete")
cor(prueba$sulfate,prueba$nitrate,use = "complete.obs")
cor(prueba$sulfate,prueba$nitrate,use = "na.or.complete")
x = 1:10
y = 2:12
x
y
y = 2:11
cor(x,y)
cor(prueba$sulfate,prueba$nitrate)
source("corr.R")
corr("specdata", 800)
corr("specdata", 900)
print(archivos[194])
prueba = read.csv(archivos[194])
good <- complete.cases(prueba)
prueba = prueba[good]
print(archivos[194])
prueba = read.csv(archivos[194])
good <- complete.cases(prueba)
good
print(archivos[194])
prueba = read.csv(archivos[194])
good <- complete.cases(prueba)
prueba = prueba(good)
print(prueba$nitrate[good])
mean(prueba$nitrate[good])
print(archivos[194])
prueba = read.csv(archivos[194])
good <- complete.cases(prueba)
#print(prueba$sulfate[good])
#print(prueba$nitrate[good])
print(cor(prueba$sulfate[good],prueba$nitrate[good]))
source("corr.R")
corr("specdata", 900)
source("corr.R")
corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata", 5000)
summary(cr)
lecgth(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("submitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
url2 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url2, destfile = "./data/hid.csv")
hid = read.csv("./data/hid.csv")
str(hid)
# Create a logical vector that identifies the households on greater than 10 acres who sold more than $10,000 worth of agriculture products
agricultureLogical = (with(hid, ACR==3 & AGS==6))
str(agricultureLogical)
which(agricultureLogical)
if (!file.exists("data")) {
dir.create("data")
}
url2 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url2, destfile = "./data/hid.csv")
hid = read.csv("./data/hid.csv")
str(hid)
# Create a logical vector that identifies the households on greater than 10 acres who sold more than $10,000 worth of agriculture products
agricultureLogical = (with(hid, ACR==3 & AGS==6))
str(agricultureLogical)
which(agricultureLogical)
url1 = "http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url1, destfile = "./data/jeff.jpg")
list.files("./data")
install.packages("jpeg")
library("jpeg")
# load the image
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
head(pic)
summary(pic)
str(pic)
quantile(pic, probs = c(30, 50, 80)/100)
url1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url1, destfile = "./data/jeff.jpg")
list.files("./data")
install.packages("jpeg")
library("jpeg")
# load the image
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
head(pic)
summary(pic)
str(pic)
quantile(pic, probs = c(30, 50, 80)/100)
install.packages("jpeg")
install.packages("jpeg")
install.packages("jpeg")
url1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url1, destfile = "./data/jeff.jpg")
list.files("./data")
# load the image
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
head(pic)
summary(pic)
str(pic)
quantile(pic, probs = c(30, 50, 80)/100)
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
file.dest <- 'jeff.jpg'
# download from the URL
download.file(file.url, file.dest, mode='wb' )
# load package
library(jpeg)
# load the data
picture <- readJPEG('jeff.jpg', native=TRUE)
# get the quantile info
quantile(picture, probs = c(0.3, 0.8) )
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# second data file
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'GDP2.csv'
# download from the URL
download.file(file.url, file.dest )
# read second file
fed <- read.csv('GDP2.csv')
View(fed)
# merge datasets
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
View(combined)
# Q3.
# sort the data
combined[with(combined, order(-V2) )]
mean(combined[combined$Income.Group=='High income: OECD',]$V2)
# non OECD
mean(combined[combined$Income.Group=='High income: nonOECD',]$V2)
quentile <- c(0.2,0.4,0.6,0.8,1)
q <- quantile(combined$V2, quentile)
q1 <- combined$V2 <= 38
xtabs(q1 ~ combined$Income.Group)
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# second data file
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'GDP2.csv'
# download from the URL
download.file(file.url, file.dest )
# read second file
fed <- read.csv('GDP2.csv')
View(fed)
# merge datasets
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
View(combined)
combined[with(combined, order(-V2) )]
combined[with(combined, order("V2") )]
combined
combined[with(combined, order(V2) )]
combined[with(combined, order("V2") )]
combined[with(combined, order(V2) )]
combined[with(combined, order(-V2)),]
combined = combined[with(combined, order(-V2)),]
View(combined)
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# second data file
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'GDP2.csv'
# download from the URL
download.file(file.url, file.dest )
# read second file
fed <- read.csv('GDP2.csv')
View(fed)
# merge datasets
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
View(combined)
# Q3.
# sort the data
combined[with(combined, order(-V2) ),]
pollo = combined[with(combined, order(-V2) )]
pollo = combined[with(combined, order(-V2) ),]
View(pollo)
install.packages("combinat")
require(combinat)
permn(3)
combn(3, 2)
comb = function(n, x) {
return(factorial(n) / (factorial(x) * factorial(n-x)))
}
comb(3,2)
comb(3,4)
comb(3,1)
comb(7,1)
combin(10, 2)
my_list < - c('one','two','three','four','five')
combn(my_list, 4, simplify=F)
my_list < - c('one','two','three','four','five')
my_list = c('one','two','three','four','five')
combn(my_list, 4, simplify=F)
combn(my_list, 4, simplify=T)
combn(my_list, 4, simplify=)
combn(my_list, 4, simplify=F)
combn(my_list, simplify=F)
combn(my_list,8 simplify=F)
combn(my_list,8, simplify=F)
combn(my_list,5, simplify=F)
combn(my_list,1, simplify=F)
combn(my_list,2, simplify=F)
permn(my_list,2, simplify=F)
permn(my_list, simplify=F)
combn(letters[1:4], 2, simplify=F)
combn(letters[1:4], 1, simplify=F)
combn(letters[1:4], 3, simplify=F)
combn(letters[1:4], c(1,2), simplify=F)
combn(letters[1:4], 1, simplify=F)
combn(letters[1:4], 2, simplify=F)
combn(letters[1:4], 3, simplify=F)
combn(letters[1:4], 4, simplify=F)
f <- function (x, m)  combn(x + m - 1, m) - seq_len(m) + 1
f(letters[1:4], 4)
if (!"pacman" %in% dir(.libPaths())) devtools::install_github("trinker/pacman")
library("pacman", lib.loc="~/R/win-library/3.1")
pacman::p_load(rmarkdown, knitr)
pacman::p_load_gh("trinker/gmailR")
library("rJava", lib.loc="~/R/win-library/3.1")
`install.packages('rJava',,'http://www.rforge.net/')`
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7\\")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
options(java.home="C:\\Program Files\\Java\\jre7\\")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
library(rJava)
?mtcars
if(!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
unzip(temp)
unlink(temp)
}
data <- read.csv("activity.csv")
?setwd
setwd("C:\\Users\\Usuario\\Desktop\\Reproducible Research\\PeerAssesment1\\RepData_PeerAssessment1-DSR")
setwd("C:\\Users\\Usuario\\Desktop\\Reproducible Research\\PeerAssesment1\\RepData_PeerAssessment1-DSR")
unzip("activity.zip")
data <- read.csv("activity.csv")
View(data)
steps_by_day <- aggregate(steps ~ date, data, sum)
setwd("C:\\Users\\Usuario\\Desktop\\Reproducible Research\\PeerAssesment1\\RepData_PeerAssessment1-DSR")
unzip("activity.zip")
data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, data, sum)
View(steps_by_day)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="red",breaks=20,xlab="Daily total steps",ylab="Frequency",)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="red",breaks=15,xlab="Daily total steps",ylab="Frequency",)
steps_by_day <- aggregate(steps ~ date, data, sum)
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="red",breaks=20,xlab="Daily total steps",ylab="Frequency",)
abline(h=rmean, na.rm=TRUE), col="blue", lwd=2)
steps_by_day <- aggregate(steps ~ date, data, sum)
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="red",breaks=20,xlab="Daily total steps",ylab="Frequency",)
abline(h=rmean, col="blue", lwd=2)
steps_by_day <- aggregate(steps ~ date, data, sum)
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="red",breaks=20,xlab="Daily total steps",ylab="Frequency",)
abline(h=rmean, col="blue", lwd=2)
rmean
steps_by_day <- aggregate(steps ~ date, data, sum)
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
rsd <- sd(steps_by_day$steps)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="red",breaks=20,xlab="Daily total steps",ylab="Frequency",)
rmean
rmedian
as.character(rmean)
as.character(reound(rmean,2)
)
as.character(round(rmean,2))
steps_by_interval <- aggregate(steps ~ interval, data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number of Steps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
steps_by_interval
steps_by_interval <- aggregate(steps ~ interval, data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number of Steps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
steps_by_interval[max_interval]
steps_by_interval[max_interval,]
steps_by_interval
attributes(steps_by_interval)
steps_by_interval[steps_by_interval == max_interval]
View(data)
View(steps_by_interval)
steps_by_interval[steps_by_interval$interval == max_interval]
max_interval
steps_by_interval[steps_by_interval$interval == max_interval,]
steps_by_interval[steps_by_interval$interval == max_interval,]$steps
setwd("C:\\Users\\Usuario\\Desktop\\Reproducible Research\\PeerAssesment1\\RepData_PeerAssessment1-DSR")
unzip("activity.zip")
data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, data, sum)
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
rsd <- sd(steps_by_day$steps)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="green",breaks=30,xlab="Daily total steps",ylab="Frequency",)
steps_by_interval <- aggregate(steps ~ interval, data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number of Steps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval_value <- steps_by_interval[steps_by_interval$interval == max_interval,]$steps
max_interval_value
incomplete <- sum(!complete.cases(data))
imputed_data <- transform(data, steps = ifelse(is.na(data$steps), steps_by_interval$steps[match(data$interval, steps_by_interval$interval)], data$steps))
imputed_data
View(imputed_data)
View(data)
View(imputed_data)
imputed_data[as.character(imputed_data$date) == "2012-10-01", 1] <- 0
steps_by_day_i <- aggregate(steps ~ date, imputed_data, sum)
hist(steps_by_day_i$steps, main = paste("Total Steps Each Day"), col="red", xlab="Number of Steps")
#Create Histogram to show difference.
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col="green", xlab="Number of Steps", add=T)
legend("topright", c("Imputed", "Non-imputed"), col=c("red", "green"), lwd=10)
rmean.i <- mean(steps_by_day_i$steps)
rmedian.i <- median(steps_by_day_i$steps)
mean_diff <- rmean.i - rmean
med_diff <- rmedian.i - rmedian
total_diff <- sum(steps_by_day_i$steps) - sum(steps_by_day$steps)
total_diff
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
imputed_data$dow = as.factor(ifelse(is.element(weekdays(as.Date(imputed_data$date)),weekdays), "Weekday", "Weekend"))
steps_by_interval_i <- aggregate(steps ~ interval + dow, imputed_data, mean)
library(lattice)
xyplot(steps_by_interval_i$steps ~ steps_by_interval_i$interval|steps_by_interval_i$dow, main="Average Steps per Day by Interval",xlab="Interval", ylab="Steps",layout=c(1,2), type="l")
imputed_data$dow
as.Date(imputed_data$date)
View(imputed_data)
summary(imputed_data)
weekdays(as.Date(imputed_data$date)),weekdays)
as.Date(imputed_data$date))
as.Date(imputed_data$date)
?weekdays
weekdays(as.Date(imputed_data$date))
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekdays <- c("lunes", "martes", "miércoles", "jueves", "viernes")
imputed_data$dow = as.factor(ifelse(is.element(weekdays(as.Date(imputed_data$date)),weekdays), "Weekday", "Weekend"))
steps_by_interval_i <- aggregate(steps ~ interval + dow, imputed_data, mean)
library(lattice)
xyplot(steps_by_interval_i$steps ~ steps_by_interval_i$interval|steps_by_interval_i$dow, main="Average Steps per Day by Interval",xlab="Interval", ylab="Steps",layout=c(1,2), type="l")
